/**
 * Sistema de traducci√≥n de actividades t√©cnicas a descripciones legibles
 * Convierte c√≥digos internos en mensajes claros para usuarios
 */

interface ActivityDescription {
  action: string;
  icon: string;
  category: string;
  priority: 'low' | 'medium' | 'high';
}

export class ActivityTranslator {
  
  private static pageNames: Record<string, string> = {
    '/': 'Panel Principal',
    '/dashboard': 'Panel de Control',
    '/whatsapp': 'WhatsApp Business',
    '/leads': 'Gesti√≥n de Leads',
    '/users': 'Gesti√≥n de Usuarios',
    '/calendar': 'Calendario',
    '/agents': 'Agentes Externos',
    '/security': 'Centro de Seguridad',
    '/settings': 'Configuraci√≥n',
    '/external-agents': 'Configuraci√≥n de Agentes',
    '/agent-security': 'Monitoreo de Seguridad'
  };

  private static whatsappAccounts: Record<number, string> = {
    1: 'Cuenta Principal',
    2: 'Cuenta de Ventas',
    3: 'Cuenta de Soporte'
  };

  /**
   * Traduce una actividad t√©cnica a descripci√≥n legible
   */
  static translateActivity(
    action: string,
    target?: string,
    page?: string,
    details?: any
  ): ActivityDescription {
    
    const pageName = this.pageNames[page || '/'] || page || 'P√°gina desconocida';
    
    // Actividades de navegaci√≥n y sesi√≥n
    if (action === 'page_visit') {
      return {
        action: `Visit√≥ ${pageName}`,
        icon: 'üåê',
        category: 'Navegaci√≥n',
        priority: 'low'
      };
    }

    if (action === 'session_start') {
      return {
        action: `Inici√≥ sesi√≥n en la aplicaci√≥n`,
        icon: 'üîì',
        category: 'Seguridad',
        priority: 'high'
      };
    }

    if (action === 'session_end') {
      const duration = details?.sessionDurationMinutes || 0;
      return {
        action: `Cerr√≥ sesi√≥n (duraci√≥n: ${duration} minutos)`,
        icon: 'üîí',
        category: 'Seguridad',
        priority: 'high'
      };
    }

    if (action === 'page_navigation') {
      return {
        action: `Naveg√≥ entre p√°ginas: ${target}`,
        icon: 'üß≠',
        category: 'Navegaci√≥n',
        priority: 'medium'
      };
    }

    if (action === 'user_inactive') {
      return {
        action: `Usuario inactivo por 5 minutos`,
        icon: '‚è±Ô∏è',
        category: 'Comportamiento',
        priority: 'medium'
      };
    }

    if (action === 'window_blur') {
      return {
        action: `Perdi√≥ el foco de la ventana`,
        icon: 'üëÅÔ∏è',
        category: 'Comportamiento',
        priority: 'low'
      };
    }

    if (action === 'window_focus') {
      return {
        action: `Regres√≥ el foco a la ventana`,
        icon: 'üëÄ',
        category: 'Comportamiento',
        priority: 'low'
      };
    }

    if (action === 'page_duration') {
      const seconds = details?.durationSeconds || 0;
      return {
        action: `Permaneci√≥ ${seconds} segundos en ${pageName}`,
        icon: '‚è∞',
        category: 'Tiempo',
        priority: 'low'
      };
    }

    if (action === 'page_scroll') {
      return {
        action: `Hizo scroll hasta ${target} de la p√°gina`,
        icon: 'üìú',
        category: 'Interacci√≥n',
        priority: 'low'
      };
    }

    if (action === 'link_click') {
      const linkText = target || 'enlace';
      return {
        action: `Hizo clic en "${linkText}" en ${pageName}`,
        icon: 'üîó',
        category: 'Navegaci√≥n',
        priority: 'low'
      };
    }

    // Actividades de interacci√≥n
    if (action === 'button_click') {
      const buttonText = this.translateButtonText(target);
      
      // Detectar acciones espec√≠ficas basadas en el texto del bot√≥n
      if (buttonText.toLowerCase().includes('conectar') || buttonText.toLowerCase().includes('connect')) {
        return {
          action: `Conect√≥ cuenta de WhatsApp`,
          icon: 'üì±',
          category: 'WhatsApp',
          priority: 'high'
        };
      }
      
      if (buttonText.toLowerCase().includes('eliminar') || buttonText.toLowerCase().includes('delete') || buttonText.toLowerCase().includes('borrar')) {
        return {
          action: `Elimin√≥ elemento: ${buttonText}`,
          icon: 'üóëÔ∏è',
          category: 'Gesti√≥n de Datos',
          priority: 'high'
        };
      }
      
      if (buttonText.toLowerCase().includes('guardar') || buttonText.toLowerCase().includes('save')) {
        return {
          action: `Guard√≥ cambios: ${buttonText}`,
          icon: 'üíæ',
          category: 'Gesti√≥n de Datos',
          priority: 'medium'
        };
      }
      
      if (buttonText.toLowerCase().includes('enviar') || buttonText.toLowerCase().includes('send')) {
        return {
          action: `Envi√≥ datos: ${buttonText}`,
          icon: 'üì§',
          category: 'Comunicaci√≥n',
          priority: 'medium'
        };
      }
      
      if (buttonText.toLowerCase().includes('activar') || buttonText.toLowerCase().includes('enable')) {
        return {
          action: `Activ√≥ funci√≥n: ${buttonText}`,
          icon: '‚úÖ',
          category: 'Configuraci√≥n',
          priority: 'medium'
        };
      }
      
      if (buttonText.toLowerCase().includes('desactivar') || buttonText.toLowerCase().includes('disable')) {
        return {
          action: `Desactiv√≥ funci√≥n: ${buttonText}`,
          icon: '‚ùå',
          category: 'Configuraci√≥n',
          priority: 'medium'
        };
      }
      
      if (buttonText.toLowerCase().includes('crear') || buttonText.toLowerCase().includes('add') || buttonText.toLowerCase().includes('nuevo')) {
        return {
          action: `Cre√≥ nuevo elemento: ${buttonText}`,
          icon: '‚ûï',
          category: 'Gesti√≥n de Datos',
          priority: 'medium'
        };
      }
      
      if (buttonText.toLowerCase().includes('editar') || buttonText.toLowerCase().includes('edit') || buttonText.toLowerCase().includes('modificar')) {
        return {
          action: `Edit√≥ elemento: ${buttonText}`,
          icon: '‚úèÔ∏è',
          category: 'Gesti√≥n de Datos',
          priority: 'medium'
        };
      }
      
      if (buttonText.toLowerCase().includes('descargar') || buttonText.toLowerCase().includes('download')) {
        return {
          action: `Descarg√≥ archivo: ${buttonText}`,
          icon: '‚¨áÔ∏è',
          category: 'Archivos',
          priority: 'low'
        };
      }
      
      if (buttonText.toLowerCase().includes('subir') || buttonText.toLowerCase().includes('upload')) {
        return {
          action: `Subi√≥ archivo: ${buttonText}`,
          icon: '‚¨ÜÔ∏è',
          category: 'Archivos',
          priority: 'medium'
        };
      }
      
      if (buttonText.toLowerCase().includes('ver') || buttonText.toLowerCase().includes('mostrar') || buttonText.toLowerCase().includes('show')) {
        return {
          action: `Visualiz√≥: ${buttonText}`,
          icon: 'üëÅÔ∏è',
          category: 'Visualizaci√≥n',
          priority: 'low'
        };
      }
      
      if (buttonText.toLowerCase().includes('filtrar') || buttonText.toLowerCase().includes('filter')) {
        return {
          action: `Aplic√≥ filtro: ${buttonText}`,
          icon: 'üîç',
          category: 'B√∫squeda',
          priority: 'low'
        };
      }
      
      if (buttonText.toLowerCase().includes('exportar') || buttonText.toLowerCase().includes('export')) {
        return {
          action: `Export√≥ datos: ${buttonText}`,
          icon: 'üìä',
          category: 'Archivos',
          priority: 'medium'
        };
      }
      
      // Acci√≥n gen√©rica para otros botones
      return {
        action: `Presion√≥ el bot√≥n "${buttonText}" en ${pageName}`,
        icon: 'üëÜ',
        category: 'Interacci√≥n',
        priority: 'medium'
      };
    }

    if (action === 'form_submit') {
      const formType = this.identifyFormType(target, page);
      return {
        action: `Envi√≥ formulario: ${formType} en ${pageName}`,
        icon: 'üìù',
        category: 'Formularios',
        priority: 'high'
      };
    }

    // Actividades espec√≠ficas de WhatsApp
    if (action === 'whatsapp_connect') {
      const accountName = this.whatsappAccounts[details?.accountId] || `Cuenta ${details?.accountId}`;
      return {
        action: `Conect√≥ ${accountName} de WhatsApp`,
        icon: 'üì±',
        category: 'WhatsApp',
        priority: 'high'
      };
    }

    if (action === 'whatsapp_disconnect') {
      const accountName = this.whatsappAccounts[details?.accountId] || `Cuenta ${details?.accountId}`;
      return {
        action: `Desconect√≥ ${accountName} de WhatsApp`,
        icon: 'üì±',
        category: 'WhatsApp',
        priority: 'medium'
      };
    }

    if (action === 'message_sent') {
      return {
        action: `Envi√≥ mensaje por WhatsApp a ${details?.contact || 'contacto'}`,
        icon: 'üí¨',
        category: 'Mensajer√≠a',
        priority: 'medium'
      };
    }

    // Actividades de gesti√≥n de datos
    if (action === 'lead_created') {
      return {
        action: `Cre√≥ nuevo lead: ${details?.leadName || 'Sin nombre'}`,
        icon: 'üë§',
        category: 'Gesti√≥n de Leads',
        priority: 'high'
      };
    }

    if (action === 'lead_updated') {
      return {
        action: `Actualiz√≥ lead: ${details?.leadName || 'Lead'} - ${details?.field || 'informaci√≥n'}`,
        icon: '‚úèÔ∏è',
        category: 'Gesti√≥n de Leads',
        priority: 'medium'
      };
    }

    if (action === 'lead_deleted') {
      return {
        action: `Elimin√≥ lead: ${details?.leadName || 'Lead'}`,
        icon: 'üóëÔ∏è',
        category: 'Gesti√≥n de Leads',
        priority: 'high'
      };
    }

    // Actividades de configuraci√≥n
    if (action === 'settings_changed') {
      return {
        action: `Modific√≥ configuraci√≥n: ${details?.setting || 'ajuste del sistema'}`,
        icon: '‚öôÔ∏è',
        category: 'Configuraci√≥n',
        priority: 'medium'
      };
    }

    if (action === 'agent_config') {
      return {
        action: `Configur√≥ agente externo: ${details?.agentName || 'agente'}`,
        icon: 'ü§ñ',
        category: 'Agentes',
        priority: 'medium'
      };
    }

    // Actividades de seguridad
    if (action === 'login') {
      return {
        action: `Inici√≥ sesi√≥n en el sistema`,
        icon: 'üîê',
        category: 'Seguridad',
        priority: 'high'
      };
    }

    if (action === 'logout') {
      return {
        action: `Cerr√≥ sesi√≥n`,
        icon: 'üö™',
        category: 'Seguridad',
        priority: 'medium'
      };
    }

    // Actividades de calendario
    if (action === 'event_created') {
      return {
        action: `Cre√≥ evento: ${details?.eventTitle || 'evento'} para ${details?.date || 'fecha'}`,
        icon: 'üìÖ',
        category: 'Calendario',
        priority: 'medium'
      };
    }

    // Actividades de scroll y tiempo
    if (action === 'page_scroll') {
      return {
        action: `Naveg√≥ por ${pageName} (${target || ''}% de la p√°gina)`,
        icon: 'üìÑ',
        category: 'Navegaci√≥n',
        priority: 'low'
      };
    }

    if (action === 'page_duration') {
      const duration = details?.duration || target;
      return {
        action: `Permaneci√≥ ${duration} en ${pageName}`,
        icon: '‚è±Ô∏è',
        category: 'Tiempo',
        priority: 'low'
      };
    }

    // Actividad gen√©rica como fallback
    return {
      action: `Realiz√≥ acci√≥n: ${action} en ${pageName}${target ? ` - ${target}` : ''}`,
      icon: 'üìã',
      category: 'General',
      priority: 'low'
    };
  }

  /**
   * Traduce texto de botones a nombres m√°s amigables
   */
  private static translateButtonText(buttonText?: string): string {
    if (!buttonText) return 'bot√≥n';

    const translations: Record<string, string> = {
      'Actualizando...': 'Actualizar Sistema',
      'Ver Todas las Actividades': 'Ver Historial Completo',
      'Cerrar': 'Cerrar Ventana',
      'Guardar': 'Guardar Cambios',
      'Enviar': 'Enviar Informaci√≥n',
      'Conectar': 'Conectar Cuenta',
      'Desconectar': 'Desconectar Cuenta',
      'Eliminar': 'Eliminar Elemento',
      'Editar': 'Editar Informaci√≥n',
      'Crear': 'Crear Nuevo',
      'Refresh': 'Actualizar',
      'Send': 'Enviar'
    };

    return translations[buttonText] || buttonText;
  }

  /**
   * Identifica el tipo de formulario basado en la p√°gina y target
   */
  private static identifyFormType(target?: string, page?: string): string {
    if (page?.includes('leads')) return 'Informaci√≥n de Lead';
    if (page?.includes('whatsapp')) return 'Configuraci√≥n de WhatsApp';
    if (page?.includes('agents')) return 'Configuraci√≥n de Agente';
    if (page?.includes('settings')) return 'Configuraci√≥n del Sistema';
    if (page?.includes('users')) return 'Informaci√≥n de Usuario';
    if (page?.includes('calendar')) return 'Evento de Calendario';
    
    return target || 'formulario';
  }

  /**
   * Determina el nivel de importancia de una actividad
   */
  static getActivityImportance(action: string, details?: any): 'low' | 'medium' | 'high' {
    const highImportanceActions = ['login', 'logout', 'form_submit', 'lead_created', 'whatsapp_connect', 'lead_deleted'];
    const mediumImportanceActions = ['button_click', 'message_sent', 'lead_updated', 'settings_changed'];
    
    if (highImportanceActions.includes(action)) return 'high';
    if (mediumImportanceActions.includes(action)) return 'medium';
    return 'low';
  }

  /**
   * Genera resumen de actividades por per√≠odo
   */
  static generateActivitySummary(activities: any[]): string {
    const actionCounts = activities.reduce((acc, activity) => {
      const translated = this.translateActivity(activity.action, activity.target, activity.page);
      acc[translated.category] = (acc[translated.category] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const summary = Object.entries(actionCounts)
      .map(([category, count]) => `${count} actividades de ${category}`)
      .join(', ');

    return summary || 'Sin actividades registradas';
  }
}